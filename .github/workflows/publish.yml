name: Publish Package

on:
  release: { types: [published] }
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional, will use package.json version if not specified)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write

env:
  RELEASE_DIR: rust-pty/target/release

jobs:
  build-libs:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            out:    librust_pty.so
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            out:    librust_pty_arm64.so
          - runner: macos-latest
            target: x86_64-apple-darwin
            out:    librust_pty.dylib
          - runner: macos-latest
            target: aarch64-apple-darwin
            out:    librust_pty_arm64.dylib
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            out:    rust_pty.dll

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1482605bfc5719782e1ae10e568334e1e752aa3a  # stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84  # v2.7.3

      - name: Install aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Configure aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p rust-pty/.cargo
          cat > rust-pty/.cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build rust-pty
        run: |
          cd rust-pty
          cargo build --release --target ${{ matrix.target }}

      - name: Collect artefact
        shell: bash
        run: |
          mkdir -p out
          shopt -s nullglob
          src=(rust-pty/target/${{ matrix.target }}/release/*.{so,dylib,dll})
          [[ ${#src[@]} -gt 0 ]] || { echo "❌ no lib"; exit 1; }
          cp "${src[0]}" "out/${{ matrix.out }}"

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: compiled-libs-${{ matrix.target }}-${{ github.run_id }}
          path: out/*

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@9d7c94cfd0a1f3ed45544c887983e9fa900f0564  # v2.0.4
        with:
          files: out/*
          fail_on_unmatched_files: true

  publish:
    needs: build-libs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5  # v1.2.2
        with:
          bun-version: latest

      - name: Install JS deps
        run: bun install --frozen-lockfile

      - name: Download all compiled libs
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427  # v4.1.4
        with:
          path: downloaded-libs
          pattern: compiled-libs-*

      - name: Move compiled libs into final release path
        run: |
          mkdir -p ${{ env.RELEASE_DIR }}
          find downloaded-libs -type f \( -name '*.so' -o -name '*.dylib' -o -name '*.dll' \) -exec cp {} ${{ env.RELEASE_DIR }}/ \;

      - name: List bundled libs
        run: ls -R ${{ env.RELEASE_DIR }}

      - name: Build TypeScript
        run: bun run build:ts

      - name: Validate and update version if specified
        if: github.event.inputs.version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease or X.Y.Z+build"
            exit 1
          fi
          npm version "$VERSION" --no-git-tag-version
          echo "✓ Publishing version: $VERSION"

      - name: Set up npm authentication
        run: |
          cat > .npmrc << 'EOF'
          //registry.npmjs.org/:_authToken=${NPM_TOKEN}
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
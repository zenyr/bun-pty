name: Publish Package

on:
  release: { types: [created, edited] }
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional, will use package.json version if not specified)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write

env:
  RELEASE_DIR: rust-pty/target/release

jobs:
  build-libs:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            out:    librust_pty.so
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            out:    librust_pty_arm64.so
          - runner: macos-latest
            target: x86_64-apple-darwin
            out:    librust_pty.dylib
          - runner: macos-latest
            target: aarch64-apple-darwin
            out:    librust_pty_arm64.dylib
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            out:    rust_pty.dll

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Install aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Configure aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p rust-pty/.cargo
          cat > rust-pty/.cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build rust-pty
        run: |
          cd rust-pty
          cargo build --release --target ${{ matrix.target }}

      - name: Collect artefact
        shell: bash
        run: |
          mkdir -p out
          shopt -s nullglob
          src=(rust-pty/target/${{ matrix.target }}/release/*.{so,dylib,dll})
          [[ ${#src[@]} -gt 0 ]] || { echo "❌ no lib"; exit 1; }
          cp "${src[0]}" "out/${{ matrix.out }}"

      - uses: actions/upload-artifact@v4
        with:
          name: compiled-libs-${{ matrix.target }}
          path: out/*

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: out/*
          fail_on_unmatched_files: true

  publish:
    needs: build-libs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install JS deps
        run: bun install

      - name: Download all compiled libs
        uses: actions/download-artifact@v4
        with:
          path: downloaded-libs

      - name: Move compiled libs into final release path
        run: |
          mkdir -p ${{ env.RELEASE_DIR }}
          find downloaded-libs -type f \( -name '*.so' -o -name '*.dylib' -o -name '*.dll' \) -exec cp {} ${{ env.RELEASE_DIR }}/ \;

      - name: List bundled libs
        run: ls -R ${{ env.RELEASE_DIR }}

      - name: Build TypeScript
        run: bun run build:ts

      - name: Update version if specified
        if: github.event.inputs.version
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          echo "Publishing version: ${{ github.event.inputs.version }}"

      - name: Set up npm authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}